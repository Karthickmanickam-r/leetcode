class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
		Arrays.sort(candidates);	
		
		List<List<Integer>> ret = findCombine(candidates, target, 0);
		
		return ret;
	}
	public List<List<Integer>> findCombine(int[] cand, int target, int idx){
		List<List<Integer>> ret = new LinkedList<List<Integer>>();
		
		for(int i = idx; i < cand.length; i++) {
			int tmp = target - cand[i];
			if(tmp == 0) {
				List<Integer> l = new ArrayList<Integer>();
				l.add(cand[i]);
				ret.add(l);
				return ret;
			} else if(tmp > 0) {
				List<List<Integer>> tmp_list = findCombine(cand, tmp, i);
				for(List<Integer> l: tmp_list) {
                                        
					l.add(0, cand[i]);
					ret.add(l);
				}
			} else {
				continue;
			}
		}
		return ret;
	}    
    
}
